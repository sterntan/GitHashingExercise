• example1.c (fork + execlp)|
--------------------------- +
(i) To compile and run:
gcc example1.c -o example1 && ./example1

(ii) Example usage & output:
Usage:
./example1
Output:
Parent Process: PID = 1234, Created Child PID = 5678
Child Process: PID = 5678, Parent PID = 1234
total 264
-rw-rw-r-- 1 user user 50 Oct 24 13:16 bar
...
Parent Process: Child has terminated.

(iii) Explanation:
Demonstrates process creation with fork() and replacing the child’s code using execlp().

=======================================================================================
• example2.c(getpid + getppid)|
----------------------------- +
(i) To compile and run:
gcc example2.c -o example2 && ./example2

(ii) Example usage & output:
Usage:
./example2
Output:
Current Process ID (PID): 2024
Parent Process ID (PPID): 2002

(iii) Explanation:
Shows how getpid() and getppid() calls work to retrieve process information.

=======================================================================================
• example3.c (Signal Handling (SIGINT) - Exit on Ctrl+C)|
------------------------------------------------------- +
(i) To compile and run:
gcc example3.c -o example3 && ./example3

(ii) Example usage & output:
Usage:
./example 3
Output:
Process ID: 3001
Press Ctrl+C to trigger SIGINT.
Running... Press Ctrl+C to exit.
Running... Press Ctrl+C to exit.
^C
Caught signal 2 (SIGINT). Exiting gracefully...

(iii) Explanation:
Installs a custom handler for the SIGINT signal to handle interruptions.

=======================================================================================
• example4.c (Signal Handling (SIGINT) - Ignore Ctrl+C)|
------------------------------------------------------ +
(i) To compile and run:
gcc example4.c -o example4 && ./example4

(ii) Example usage & output:
Usage:
./example4
Output:
Process ID: 3050
Press Ctrl+C to attempt to send SIGINT.
Running... Try pressing Ctrl+C.
Running... Try pressing Ctrl+C.
^C
Received SIGINT (signal 2), but ignoring it.

(iii) Explanation:
Similar setup to (3), but the signal handler does not terminate the process.

=======================================================================================
• example5.c (Sending Signals Between Processes)|
----------------------------------------------- +

(i) To compile and run:
gcc example5.c -o example5 && ./example5

(ii) Example usage & output:
Usage:
./example5
Output:
Parent process ID: 5000. Child PID: 5001
Child process ID: 5001. Waiting for SIGUSR1...
Parent sending SIGUSR1 to child.
Child received SIGUSR1 (signal 10).
Parent sending SIGTERM to child.
Child process terminated.

(iii) Explanation:
Illustrates inter-process signaling with kill() and custom signal handlers
 (SIGUSR1 in the child).
